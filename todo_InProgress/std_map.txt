

    [std::map] 
        - Kontener asocjacyjny STL, przechowujący posortowaną listę unikalnych par postaci klucz-wartość.
        - Większość implementacji [std::map] jest algorytmem drzewa czerwono-czarnego.

        - Klucze są stałe [const], aby zmienić klucz należy najpierw usunąć węzeł, następnie wstawić nowy.
        - Wartości mogą się powtarzać. Mogą być modyfikowane. Sortowanie odbywa się na podstawie Klucza.
        - Typ trzymanych danych to [ std::pair<Typ_Klucz, Typ_Wartosc> ].

        - Operacje wstawiania, usuwania, wyszukiwania elementów mają złożoność logarytmiczną względem ilości elementów.



    1. Iteratory
         • std::map::iterator
         • std::map::begin / std::map::rbegin
         • std::map::end / std::map::rend

    2. Metoda [.insert(std::pair<Typ_Klucz, Typ_Wartosc>)]
    3. Metoda [.erase(Typ_Klucz)]



 ---------------------------------------------------------- ----------------------------------------------------------
 [1. Iteratory] ------------------------------------------- ----------------------------------------------------------
 


 ---------------------------------------------------------- ----------------------------------------------------------
 [2. insert] ---------------------------------------------- ----------------------------------------------------------
 
     ─┬─────────────────────────────────────────────────────────────
     1│ map<int, int> M;    // Dodawane elementy mapy będą typu [std::pair<int, int>]
     2│
     3│
     4│ M.insert(pair<int, int>(5,12));	    // korzystamy z konstruktora typu [std::pair<>]
     5│ 
     6│ /* Metoda [insert] zwraca parę, której pierwszym 
     7│    elementem jest [iterator], a drugim [bool].
     8│    _______________________________________________________________
     9│    Iterator to wskaźnik na konkretny element mapy. 
	10│    Jest on typu wskazującego na parę podaną w definicji mapy. Tutaj będzie to [std::pair<int,int>]
    11│     [ map<int,int>::iterator ]
    12│    _______________________________________________________________
    13│    Drugi element pary zwracanej przez metode [insert] jest typu [bool]:
    14│     0 - Istnieje już element o podanym kluczu. Nie powstał nowy element.
    15│     1 - Został utworzony nowy element, ponieważ nie istniał wcześniej element o takim kluczu.
    16│ 
    17│    Na wynik nie ma wpływu [wartość] elementu. Tylko i wyłącznie [klucz] elementu.
    18│    _______________________________________________________________
    19│    W tym przypadku, zwracana przez [insert] wartość będzie typu:
    20│     [pair< map<int,int>::iterator, bool >]
    21│                          │         └──────── bool mówiący czy klucz jest unikatowy.
    22│                          │ 
    23│                          └──────── iterator = wskaźnik na element trzymany w mapie.
    24│                                    Jeżeli wstawiony element był unikatowy, wtedy iterator jest na niego ustawiony.
    25│                                    Jeżeli wstawiany klucz nie był unikatowy, wtedy iterator wskazuje element który był tam wcześniej.
    26│ */ 
    27│ 
    28│ // W celu uzyskania zwracanej pary, nie powinno się podawać zwracanego typu ręcznie:
    29│ std::pair<std::map<int,int>::iterator,bool> a;   // Zmienna [a] typu zwracanego przez [M.Insert()]
    30│ a = M.insert(pair<int, int>(-5,13));
    31│ 
    32│ // Tak napisany program traci na czytelności. Zamiast tego wykorzystujemy dedukowanie typu [auto]
    33│ auto b = M.insert(pair<int, int>(-7,14));   // Zmienna [b] typu zwracanego przez [M.Insert()]
    34│
    35│
    36│ // Wykorzystanie zwracanych przez metodę [insert] wartości.
    37│ // [a] jest typu: [std::pair<std::map<int,int>::iterator,bool>]
    38│
	39│ // [a.second] 
    40│ std::cout << a.second;   // wyłuskanie wartości typu [bool] 
    41│
    42│ // [a.first] 
    43│	    // wyłuskanie iteratora [map<int,int>::iterator] 
    44│     // wskazującego na typ [std::pair<const int, int>]
    45│
    46│ // Posiadając iterator na konkretny element, mamy dostęp do jego dwóch wartości: [Typ_Klucz, Typ_Wartosc]
    47│ // Pamiętaj że iterator jest wskaźnikiem!
    48│ std::cout << "\n " << (a.first)->first      // wypisze wartość [klucz elementu] wskazywanego przez iterator
    49│           << "\n " << (a.first)->second;    // wypisze wartość [wartość elementu] wskazywanego przez iterator

	

 ---------------------------------------------------------- ----------------------------------------------------------
 [3. erase] ----------------------------------------------- ---------------------------------------------------------- 
	 

	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 


 by: Kacu
|                  $$NDDDDDDNDDNDDDN8=
|               ZZNNDDNNDDDDDDNDDDDNNDND
|             $Z8NDDNDNNDDNDDNMDDDDDNDNDN
|           $$DNDDDDNNDDDNDNNDDDNNNDDDNN8?~
|          $NDNDDDDNNDDDD:''''''''''''''''''
|         8DDNDDDDDNO++:''''''''''''''''''''
|         8NNDDDN++=++O''''''''''''''''''''''
|        ZNNNM+++++++?+:'''''''''''''''''''',
|        $ND=+++++++++?'''',,,,,,:,'''''+NNDN
|        $N+++++++++++Z''IMDNNNDND'''''NDD,,,
|        ?,,,:7+++?::''''''''''''''''''''''''
|        ,,,:,7+++?,'''''''''''''''''''''''''
|        :,,,,~7+I,''''''''''''''''''''''''''
|          ,,,,$:''''''''''''''''''''''''''''
|           ,,:+:''''''''''''''''''''''''''''
|             ~Z?''''''''''''''''''''''''''''
|              +'''''''''''''''''''''''''''''
|              '$'''''''''''''''''''''''''''
|              '''Z'''''''''''''''''''''''''
|              '''''~''''''''''''''''''''''
|              '''''''=''''''''''''''?DI,''
|              '''''''''?'''''''''''''''''
|              '''''''''''=?=''''''''$DDI~
|               ''''''''''''''=+''DNDDNDN$
|                '''''''''''''''=:?8$ZZZ$
|                 '''''''''''''''
|                  ''''''''''''''
|                    '''''''''
|                     '''''

